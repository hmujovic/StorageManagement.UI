@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager;
@inject IAuthenticationViewModel authenticationViewModel;
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar _snackbar;

<EditForm Model="_forgotPasswordDto" OnValidSubmit="ForgotPassword" style="align-items:center; display:flex; flex-direction:column; margin-top:20px; ">
    <DataAnnotationsValidator/>
    <MudCard Style="width:450px" Elevation="0">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Color="@Color.Primary" Typo="Typo.h4">Passwort vergessen</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Variant="Variant.Outlined" Label="E-Mail" @bind-Value="_forgotPasswordDto.Email" For="@(() => _forgotPasswordDto.Email)"/>
        </MudCardContent>
        <MudCardActions Style="display:flex; flex-direction:column">
            <MudButton Class="mb-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary">SENDEN</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-3 w-100 mb-10" @onclick=" NavigateToLogin"> Anmelden</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private ForgotPasswordDto _forgotPasswordDto = new ForgotPasswordDto();
    public bool ShowAuthError { get; set; }
    public string Error { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;
        // if (user.Identity!.IsAuthenticated)
        // {
        //     navigationManager.NavigateTo("/feed");
        // }
    }

    public async Task ForgotPassword()
    {
        ShowAuthError = false;
        var result = await authenticationViewModel.ForgotPassword(_forgotPasswordDto);
        if (!result.IsSuccess)
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add(result.Message, Severity.Error);
        }
        else
        {
            navigationManager.NavigateTo("/");
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add(result.Message, Severity.Success);
        }
    }

    private void NavigateToLogin()
    {
        navigationManager.NavigateTo("/");
    }

}