@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigationManager;
@inject IAuthenticationViewModel authenticationViewModel;
@inject ISnackbar _snackbar;

<EditForm Model="_resetPassword"  style="align-items:center; display:flex; flex-direction:column; margin-top:20px; ">
    <DataAnnotationsValidator/>
    <MudCard Style="width:400px" Elevation="0">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Passwort zurücksetzen</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Variant="Variant.Outlined" InputType="InputType.Password" Label="Neues Passwort" @bind-Value="_resetPassword.NewPassword" For="@(() => _resetPassword.NewPassword)" Required/>
            <MudTextField Variant="Variant.Outlined" InputType="InputType.Password" Label="Passwort bestätigen" @bind-Value="_resetPassword.ConfirmPassword" For="@(() => _resetPassword.ConfirmPassword)" Required/>

            <MudText Color="Color.Error">@Error</MudText>
        </MudCardContent>
        <MudCardActions Style="display:flex; flex-direction:column">
            <MudButton Class="mb-2" ButtonType="ButtonType.Submit" @onclick="ResetPassword"  Variant="Variant.Filled" FullWidth="true">Ausführen</MudButton>
            <MudButton Variant="Variant.Outlined" Class="mt-3 w-100" @onclick=" NavigateToLogin"> Anmelden</MudButton>
        </MudCardActions>
    </MudCard>

</EditForm>

@code {
    private ResetPasswordDto _resetPassword = new ResetPasswordDto();
    public bool ShowAuthError { get; set; }
    public string? Error { get; set; }
    string? email { get; set; } = "";

    string? token { get; set; } = "";

    //bool IsResetToken = false;
    protected override void OnInitialized()
    {
        GetHttpParameters();
    }

    public async Task ResetPassword()
    {
        var result = await authenticationViewModel.ResetPassword(_resetPassword);
        if (!result.IsSuccess)
        {
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add(result.Message, Severity.Error);
        }
        else
        {
            navigationManager.NavigateTo("/");
            _snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopRight;
            _snackbar.Add(result.Message, Severity.Success);
        }
    }

    public void GetHttpParameters()
    {
        var uriBuilder = new UriBuilder(navigationManager.Uri);
        var httpQuery = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        _resetPassword.Email = httpQuery["email"] ?? "";
        _resetPassword.ResetPasswordToken = httpQuery["token"] ?? "";
    }

    private void NavigateToLogin()
    {
        navigationManager.NavigateTo("/");
    }

}