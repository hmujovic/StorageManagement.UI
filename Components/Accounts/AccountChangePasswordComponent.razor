@inject IAuthenticationViewModel auth;

<MudDialog Style="width:inherit">
    <TitleContent>
        <MudText Typo="Typo.h6">Passwort ändern</MudText>
    </TitleContent>
    <DialogContent>
        @if (auth.ErrorMessage != string.Empty)
        {
            <div style="align-items:center; display:flex; flex-direction:column; margin-top:20px; ">
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@auth.ErrorMessage</MudAlert>
            </div>
        }
        @if (auth.SuccessMessage != string.Empty)
        {
            <div style="align-items:center; display:flex; flex-direction:column; margin-top:20px;">
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled">@auth.SuccessMessage</MudAlert>
            </div>
        }
        <MudCard Elevation="0">

            <MudCardContent>
                <MudTextField Variant="Variant.Outlined" Label="Altes Passwort" InputType="InputType.Password" @bind-Value="@auth.ChangePassword.OldPassword" Required For="@(() => auth.ChangePassword.OldPassword)"/>
                <MudTextField Variant="Variant.Outlined" Label="Neues Passwort" InputType="InputType.Password" @bind-Value="@auth.ChangePassword.NewPassword" Required For="@(() => auth.ChangePassword.NewPassword)"/>
                <MudTextField Variant="Variant.Outlined" Label="Neues Passwort bestätigen" InputType="InputType.Password" @bind-Value="@auth.ChangePassword.ConfirmPassword" Required For="@(() => auth.ChangePassword.ConfirmPassword)"/>
            </MudCardContent>

        </MudCard>


    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="() => Cancel()">Abbrechen</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(() => Change())">
            @if (IsLoading)
            {
                <MudProgressCircular Color="Color.Primary" Size=Size.Small Indeterminate=@IsLoading>
                </MudProgressCircular>
            }
            Passwort ändern
        </MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] private MudDialogInstance? MudDialog { get; set; }
    private bool IsLoading { get; set; }

    private async void Change()
    {
        IsLoading = true;

        await auth.ChangeUserPassword();
        IsLoading = false;
        StateHasChanged();
        MudDialog.Close(true);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}